// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using CandidatesAPI.Entities;
using Microsoft.EntityFrameworkCore;

namespace CandidatesAPI.Infrastructure;

public partial class CandidatesContext : DbContext
{
    public CandidatesContext(DbContextOptions<CandidatesContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdminSetting> AdminSettings { get; set; }

    public virtual DbSet<AmortPlan> AmortPlans { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeesDepartment> EmployeesDepartments { get; set; }

    public virtual DbSet<ExchangeRate> ExchangeRates { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Number> Numbers { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<RndCompany> RndCompanies { get; set; }

    public virtual DbSet<RndName> RndNames { get; set; }

    public virtual DbSet<RndStreet> RndStreets { get; set; }

    public virtual DbSet<RndSurname> RndSurnames { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Slovenian_CI_AS");

        modelBuilder.Entity<AdminSetting>(entity =>
        {
            entity.ToTable("admin_settings");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");
            entity.Property(e => e.ValBit).HasColumnName("val_bit");
            entity.Property(e => e.ValDatetime)
                .HasColumnType("datetime")
                .HasColumnName("val_datetime");
            entity.Property(e => e.ValDecimal)
                .HasColumnType("decimal(20, 4)")
                .HasColumnName("val_decimal");
            entity.Property(e => e.ValInt).HasColumnName("val_int");
            entity.Property(e => e.ValString).HasColumnName("val_string");
        });

        modelBuilder.Entity<AmortPlan>(entity =>
        {
            entity.HasKey(e => e.DocumentId);

            entity.ToTable("amort_plan");

            entity.Property(e => e.DocumentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("document_id");
            entity.Property(e => e.ClaimDate).HasColumnName("claim_date");
            entity.Property(e => e.ClaimDueDate).HasColumnName("claim_due_date");
            entity.Property(e => e.ClaimPeriod).HasColumnName("claim_period");
            entity.Property(e => e.ClaimType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("claim_type");
            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.CurrencyCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_code");
            entity.Property(e => e.DueAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("due_amount");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("interest_amount");
            entity.Property(e => e.NetAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_amount");
            entity.Property(e => e.OtherAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("other_amount");
            entity.Property(e => e.PaidAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("paid_amount");
            entity.Property(e => e.TaxAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("tax_amount");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_amount");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.Contract).WithMany(p => p.AmortPlans)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_amort_plan_contract_contract_id");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.AmortPlans)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_amortisation_plan_currencies_currency_code");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.ContractId).HasName("PK_contracts_contract_id");

            entity.ToTable("contracts");

            entity.HasIndex(e => e.ContractNumber, "UQ_contracts_contract_number").IsUnique();

            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.ActivationDate).HasColumnName("activation_date");
            entity.Property(e => e.ActivityStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("inactive")
                .HasColumnName("activity_status");
            entity.Property(e => e.ContractNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contract_number");
            entity.Property(e => e.ContractValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("contract_value");
            entity.Property(e => e.CurrencyCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_code");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.EnteredDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("entered_date");
            entity.Property(e => e.InterestRate)
                .HasColumnType("decimal(20, 10)")
                .HasColumnName("interest_rate");
            entity.Property(e => e.TaxRate)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("tax_rate");
            entity.Property(e => e.TaxValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("tax_value");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_contracts_currency_currency_code");

            entity.HasOne(d => d.Customer).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Employee).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_employees_employee_id");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryCode);

            entity.ToTable("countries");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country_code");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("country_name");
            entity.Property(e => e.EuMember).HasColumnName("eu_member");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.HasKey(e => e.CurrencyCode);

            entity.ToTable("currencies");

            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_code");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country_code");
            entity.Property(e => e.Inactive).HasColumnName("inactive");
            entity.Property(e => e.InternationalCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("international_code");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Currencies)
                .HasForeignKey(d => d.CountryCode)
                .HasConstraintName("FK_currencies_country_code");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.ToTable("customers");

            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.AssignedEmployeeId).HasColumnName("assigned_employee_id");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("country_code");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("customer_type");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FullName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("full_name");
            entity.Property(e => e.Inactive).HasColumnName("inactive");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("postal_code");
            entity.Property(e => e.RegistrationNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("registration_number");
            entity.Property(e => e.ShortName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("short_name");
            entity.Property(e => e.Street)
                .IsRequired()
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("street");
            entity.Property(e => e.TaxNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tax_number");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.AssignedEmployee).WithMany(p => p.Customers)
                .HasForeignKey(d => d.AssignedEmployeeId)
                .HasConstraintName("FK_customers_assigned_employee_id");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Customers).HasForeignKey(d => d.CountryCode);
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("PK_departmetns");

            entity.ToTable("departments");

            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.ToTable("employees");

            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.ActiveFrom)
                .HasColumnType("datetime")
                .HasColumnName("active_from");
            entity.Property(e => e.ActiveTo)
                .HasColumnType("datetime")
                .HasColumnName("active_to");
            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<EmployeesDepartment>(entity =>
        {
            entity.ToTable("employees_departments");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFrom)
                .HasColumnType("datetime")
                .HasColumnName("active_from");
            entity.Property(e => e.ActiveTo)
                .HasColumnType("datetime")
                .HasColumnName("active_to");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.Department).WithMany(p => p.EmployeesDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_employees_departments_departments");

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeesDepartments)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_employees_departments_employees_employees");
        });

        modelBuilder.Entity<ExchangeRate>(entity =>
        {
            entity.HasKey(e => new { e.CurrencyFrom, e.CurrencyTo, e.ExchangeRateDate });

            entity.ToTable("exchange_rates");

            entity.Property(e => e.CurrencyFrom)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_from");
            entity.Property(e => e.CurrencyTo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_to");
            entity.Property(e => e.ExchangeRateDate).HasColumnName("exchange_rate_date");
            entity.Property(e => e.ExchangeRate1)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("exchange_rate");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.CurrencyFromNavigation).WithMany(p => p.ExchangeRateCurrencyFromNavigations)
                .HasForeignKey(d => d.CurrencyFrom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_exchange_rates_currency_from");

            entity.HasOne(d => d.CurrencyToNavigation).WithMany(p => p.ExchangeRateCurrencyToNavigations)
                .HasForeignKey(d => d.CurrencyTo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_exchange_rates_currency_to");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("PK_invoice");

            entity.ToTable("invoices");

            entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");
            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.CurrencyCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_code");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.DocumentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("document_id");
            entity.Property(e => e.DueDate).HasColumnName("due_date");
            entity.Property(e => e.InvoiceIssueDate).HasColumnName("invoice_issue_date");
            entity.Property(e => e.NetAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("net_amount");
            entity.Property(e => e.TaxAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("tax_amount");
            entity.Property(e => e.TaxRate)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("tax_rate");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_amount");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.Contract).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_invoice_contracts_contract_id");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Customer).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Number>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("numbers");

            entity.Property(e => e.Num)
                .ValueGeneratedOnAdd()
                .HasColumnName("num");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.ToTable("payments");

            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.CurrencyCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("currency_code");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.DocumentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("document_id");
            entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");
            entity.Property(e => e.PaymentAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("payment_amount");
            entity.Property(e => e.PaymentDate).HasColumnName("payment_date");
            entity.Property(e => e.Ts)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("ts");

            entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.Payments)
                .HasForeignKey(d => d.CurrencyCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_payments_currency_code");

            entity.HasOne(d => d.Customer).WithMany(p => p.Payments)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_payments_customer_id");

            entity.HasOne(d => d.Invoice).WithMany(p => p.Payments)
                .HasForeignKey(d => d.InvoiceId)
                .HasConstraintName("FK_payments_invoice_id");
        });

        modelBuilder.Entity<RndCompany>(entity =>
        {
            entity.HasKey(e => e.Company);

            entity.ToTable("_rnd_companies");

            entity.Property(e => e.Company)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("company");
        });

        modelBuilder.Entity<RndName>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("_rnd_names");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<RndStreet>(entity =>
        {
            entity.HasKey(e => e.Street);

            entity.ToTable("_rnd_streets");

            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("street");
        });

        modelBuilder.Entity<RndSurname>(entity =>
        {
            entity.HasKey(e => e.Surname).HasName("PK__rndsurnames");

            entity.ToTable("_rnd_surnames");

            entity.Property(e => e.Surname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("surname");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}